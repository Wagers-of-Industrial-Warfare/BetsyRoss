plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
loom {
    forge {
        mixinConfig "betsyross-common.mixins.json"
        mixinConfig "betsyross.mixins.json"
    }
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven { url = "https://maven.theillusivec4.top/" } // Curios
}

dependencies {
    forge "net.minecraftforge:forge:${forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modImplementation("curse.maven:immersive-paintings-639584:${immersive_paintings_forge_file}")

    // Curios
    modRuntimeOnly("top.theillusivec4.curios:curios-forge:${curios_forge_version}")
    modCompileOnly("top.theillusivec4.curios:curios-forge:${curios_forge_version}:api")

    compileOnly("io.github.llamalad7:mixinextras-common:${mixinextras_version}")
    annotationProcessor(implementation(include("io.github.llamalad7:mixinextras-forge:${mixinextras_version}")))
}

processResources {
    Map<String, String> properties = Map.of(
        "version", project.version,
        "immersive_paintings_requirement", immersive_paintings_forge_requirement,
        "curios_requirement", curios_requirement
    )
    inputs.properties properties

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set(shadowJar.archiveFile)
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
